
Christmas Star.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800040  00000388  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800042  00800042  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c94  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061a  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000756  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cb  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdd  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	5c c0       	rjmp	.+184    	; 0xbe <__vector_2>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	6d c1       	rjmp	.+730    	; 0x2f2 <main+0x26>
  18:	71 c1       	rjmp	.+738    	; 0x2fc <main+0x30>
  1a:	75 c1       	rjmp	.+746    	; 0x306 <main+0x3a>
  1c:	79 c1       	rjmp	.+754    	; 0x310 <main+0x44>
  1e:	7d c1       	rjmp	.+762    	; 0x31a <main+0x4e>
  20:	81 c1       	rjmp	.+770    	; 0x324 <main+0x58>
  22:	85 c1       	rjmp	.+778    	; 0x32e <main+0x62>
  24:	89 c1       	rjmp	.+786    	; 0x338 <main+0x6c>
  26:	8d c1       	rjmp	.+794    	; 0x342 <main+0x76>

00000028 <__ctors_end>:
  28:	11 27       	eor	r17, r17
  2a:	1f bf       	out	0x3f, r17	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d0 e0       	ldi	r29, 0x00	; 0
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	20 e0       	ldi	r18, 0x00	; 0
  36:	a0 e4       	ldi	r26, 0x40	; 64
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e8 e8       	ldi	r30, 0x88	; 136
  3c:	f3 e4       	ldi	r31, 0x43	; 67
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	31 91       	ld	r19, Z+
  42:	3d 93       	st	X+, r19
  44:	a2 34       	cpi	r26, 0x42	; 66
  46:	b2 07       	cpc	r27, r18
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	a2 e4       	ldi	r26, 0x42	; 66
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 93       	st	X+, r17

00000054 <.do_clear_bss_start>:
  54:	a5 34       	cpi	r26, 0x45	; 69
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	38 d1       	rcall	.+624    	; 0x2cc <main>
  5c:	93 c1       	rjmp	.+806    	; 0x384 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  60:	0a 9a       	sbi	0x01, 2	; 1
  
  masklo	=~maskhi&ws2812_PORTREG;
  62:	52 b1       	in	r21, 0x02	; 2
  64:	5b 7f       	andi	r21, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
  66:	a2 b1       	in	r26, 0x02	; 2
  68:	a4 60       	ori	r26, 0x04	; 4
  
  sreg_prev=SREG;
  6a:	bf b7       	in	r27, 0x3f	; 63
  cli();  
  6c:	f8 94       	cli

  while (datlen--) {
  6e:	61 17       	cp	r22, r17
  70:	71 07       	cpc	r23, r17
  72:	09 f4       	brne	.+2      	; 0x76 <ws2812_sendarray+0x16>
  74:	22 c0       	rjmp	.+68     	; 0xba <loop318+0x38>
  76:	e8 2f       	mov	r30, r24
  78:	f9 2f       	mov	r31, r25
  7a:	86 0f       	add	r24, r22
  7c:	97 1f       	adc	r25, r23
    curbyte=*data++;
  7e:	41 91       	ld	r20, Z+
    
    asm volatile(
  80:	68 e0       	ldi	r22, 0x08	; 8

00000082 <loop318>:
  82:	a2 b9       	out	0x02, r26	; 2
  84:	47 ff       	sbrs	r20, 7
  86:	52 b9       	out	0x02, r21	; 2
  88:	44 0f       	add	r20, r20
  8a:	00 00       	nop
  8c:	00 c0       	rjmp	.+0      	; 0x8e <loop318+0xc>
  8e:	52 b9       	out	0x02, r21	; 2
  90:	00 00       	nop
  92:	00 c0       	rjmp	.+0      	; 0x94 <loop318+0x12>
  94:	00 c0       	rjmp	.+0      	; 0x96 <loop318+0x14>
  96:	00 c0       	rjmp	.+0      	; 0x98 <loop318+0x16>
  98:	00 c0       	rjmp	.+0      	; 0x9a <loop318+0x18>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <loop318+0x1a>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <loop318+0x1c>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <loop318+0x1e>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <loop318+0x20>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <loop318+0x22>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <loop318+0x24>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <loop318+0x26>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <loop318+0x28>
  aa:	00 c0       	rjmp	.+0      	; 0xac <loop318+0x2a>
  ac:	00 c0       	rjmp	.+0      	; 0xae <loop318+0x2c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <loop318+0x2e>
  b0:	6a 95       	dec	r22
  b2:	39 f7       	brne	.-50     	; 0x82 <loop318>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
  b4:	e8 17       	cp	r30, r24
  b6:	f9 07       	cpc	r31, r25
  b8:	11 f7       	brne	.-60     	; 0x7e <ws2812_sendarray+0x1e>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  ba:	bf bf       	out	0x3f, r27	; 63
  bc:	08 95       	ret

000000be <__vector_2>:

uint8_t selectedColor = MAXCOLORS;
struct cRGB led;

ISR(PCINT0_vect)
{
  be:	1f 93       	push	r17
  c0:	0f 93       	push	r16
  c2:	0f b7       	in	r16, 0x3f	; 63
  c4:	0f 93       	push	r16
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	if(!(PINB & (1 << PINB1)))
  d0:	01 99       	sbic	0x00, 1	; 0
  d2:	05 c0       	rjmp	.+10     	; 0xde <__vector_2+0x20>
	{
		selectedColor++;
		selectedColor%=MAXCOLORS;
  d4:	80 a1       	lds	r24, 0x40	; 0x800040 <__data_start>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	6a e0       	ldi	r22, 0x0A	; 10
  da:	48 d1       	rcall	.+656    	; 0x36c <__udivmodqi4>
  dc:	90 a9       	sts	0x40, r25	; 0x800040 <__data_start>
	}
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	0f 91       	pop	r16
  e8:	0f bf       	out	0x3f, r16	; 63
  ea:	0f 91       	pop	r16
  ec:	1f 91       	pop	r17
  ee:	18 95       	reti

000000f0 <fade>:

void fade(uint8_t red, uint8_t green, uint8_t blue)
{
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <fade+0xa>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	28 2f       	mov	r18, r24
 100:	cf 5f       	subi	r28, 0xFF	; 255
 102:	df 4f       	sbci	r29, 0xFF	; 255
 104:	68 83       	st	Y, r22
 106:	c1 50       	subi	r28, 0x01	; 1
 108:	d0 40       	sbci	r29, 0x00	; 0
 10a:	ce 5f       	subi	r28, 0xFE	; 254
 10c:	df 4f       	sbci	r29, 0xFF	; 255
 10e:	48 83       	st	Y, r20
 110:	c2 50       	subi	r28, 0x02	; 2
 112:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t start = 0;
	uint8_t i = 0;
	
	if(led.r > red)
 114:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 116:	84 17       	cp	r24, r20
 118:	10 f4       	brcc	.+4      	; 0x11e <__DATA_REGION_LENGTH__+0x1e>
		start |= DEC_RED;
 11a:	32 e0       	ldi	r19, 0x02	; 2
 11c:	01 c0       	rjmp	.+2      	; 0x120 <__DATA_REGION_LENGTH__+0x20>
	}
}

void fade(uint8_t red, uint8_t green, uint8_t blue)
{
	uint8_t start = 0;
 11e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i = 0;
	
	if(led.r > red)
		start |= DEC_RED;
	if(led.r < red)
 120:	42 17       	cp	r20, r18
 122:	08 f4       	brcc	.+2      	; 0x126 <__DATA_REGION_LENGTH__+0x26>
		start |= INC_RED;
 124:	31 60       	ori	r19, 0x01	; 1
	if(led.g > green)
 126:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	df 4f       	sbci	r29, 0xFF	; 255
 12c:	58 81       	ld	r21, Y
 12e:	c1 50       	subi	r28, 0x01	; 1
 130:	d0 40       	sbci	r29, 0x00	; 0
 132:	54 17       	cp	r21, r20
 134:	08 f4       	brcc	.+2      	; 0x138 <__DATA_REGION_LENGTH__+0x38>
		start |= DEC_GREEN;
 136:	38 60       	ori	r19, 0x08	; 8
	if(led.g < green)
 138:	cf 5f       	subi	r28, 0xFF	; 255
 13a:	df 4f       	sbci	r29, 0xFF	; 255
 13c:	68 81       	ld	r22, Y
 13e:	c1 50       	subi	r28, 0x01	; 1
 140:	d0 40       	sbci	r29, 0x00	; 0
 142:	46 17       	cp	r20, r22
 144:	08 f4       	brcc	.+2      	; 0x148 <__DATA_REGION_LENGTH__+0x48>
		start |= INC_GREEN;
 146:	34 60       	ori	r19, 0x04	; 4
	if(led.b > blue)
 148:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 14a:	ce 5f       	subi	r28, 0xFE	; 254
 14c:	df 4f       	sbci	r29, 0xFF	; 255
 14e:	58 81       	ld	r21, Y
 150:	c2 50       	subi	r28, 0x02	; 2
 152:	d0 40       	sbci	r29, 0x00	; 0
 154:	54 17       	cp	r21, r20
 156:	08 f4       	brcc	.+2      	; 0x15a <__DATA_REGION_LENGTH__+0x5a>
		start |= DEC_BLUE;
 158:	30 62       	ori	r19, 0x20	; 32
	if(led.b < blue)
 15a:	ce 5f       	subi	r28, 0xFE	; 254
 15c:	df 4f       	sbci	r29, 0xFF	; 255
 15e:	68 81       	ld	r22, Y
 160:	c2 50       	subi	r28, 0x02	; 2
 162:	d0 40       	sbci	r29, 0x00	; 0
 164:	46 17       	cp	r20, r22
 166:	08 f0       	brcs	.+2      	; 0x16a <__DATA_REGION_LENGTH__+0x6a>
 168:	46 c0       	rjmp	.+140    	; 0x1f6 <__DATA_REGION_LENGTH__+0xf6>
		start |= INC_BLUE;
 16a:	30 61       	ori	r19, 0x10	; 16
 16c:	44 c0       	rjmp	.+136    	; 0x1f6 <__DATA_REGION_LENGTH__+0xf6>
	while(led.r != red || led.g != green || led.b != blue)
	{
		if((start & INC_RED)== INC_RED)
 16e:	30 ff       	sbrs	r19, 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <__DATA_REGION_LENGTH__+0x76>
			led.r++;
 172:	4f 5f       	subi	r20, 0xFF	; 255
 174:	43 a9       	sts	0x43, r20	; 0x800043 <__data_end+0x1>
		if((start & DEC_RED)== DEC_RED)
 176:	31 ff       	sbrs	r19, 1
 178:	03 c0       	rjmp	.+6      	; 0x180 <__DATA_REGION_LENGTH__+0x80>
			led.r--;
 17a:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 17c:	41 50       	subi	r20, 0x01	; 1
 17e:	43 a9       	sts	0x43, r20	; 0x800043 <__data_end+0x1>
		if((start & INC_GREEN)== INC_GREEN)
 180:	32 ff       	sbrs	r19, 2
 182:	03 c0       	rjmp	.+6      	; 0x18a <__DATA_REGION_LENGTH__+0x8a>
			led.g++;
 184:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	42 a9       	sts	0x42, r20	; 0x800042 <__data_end>
		if((start & DEC_GREEN)== DEC_GREEN)
 18a:	33 ff       	sbrs	r19, 3
 18c:	03 c0       	rjmp	.+6      	; 0x194 <__DATA_REGION_LENGTH__+0x94>
			led.g--;
 18e:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 190:	41 50       	subi	r20, 0x01	; 1
 192:	42 a9       	sts	0x42, r20	; 0x800042 <__data_end>
		if((start & INC_BLUE)== INC_BLUE)
 194:	34 ff       	sbrs	r19, 4
 196:	03 c0       	rjmp	.+6      	; 0x19e <__DATA_REGION_LENGTH__+0x9e>
			led.b++;
 198:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 19a:	4f 5f       	subi	r20, 0xFF	; 255
 19c:	44 a9       	sts	0x44, r20	; 0x800044 <__data_end+0x2>
		if((start & DEC_BLUE)== DEC_BLUE)
 19e:	35 ff       	sbrs	r19, 5
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <__DATA_REGION_LENGTH__+0xa8>
			led.b--;
 1a2:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 1a4:	41 50       	subi	r20, 0x01	; 1
 1a6:	44 a9       	sts	0x44, r20	; 0x800044 <__data_end+0x2>
		if(led.r == red)
 1a8:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 1aa:	24 13       	cpse	r18, r20
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <__DATA_REGION_LENGTH__+0xb0>
		{
			start &= ~INC_RED;
			start &= ~DEC_RED;
 1ae:	3c 7f       	andi	r19, 0xFC	; 252
		}
		if(led.g == green)
 1b0:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
 1b4:	df 4f       	sbci	r29, 0xFF	; 255
 1b6:	58 81       	ld	r21, Y
 1b8:	c1 50       	subi	r28, 0x01	; 1
 1ba:	d0 40       	sbci	r29, 0x00	; 0
 1bc:	54 13       	cpse	r21, r20
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__DATA_REGION_LENGTH__+0xc2>
		{
			start &= ~INC_GREEN;
			start &= ~DEC_GREEN;
 1c0:	33 7f       	andi	r19, 0xF3	; 243
		}
		if(led.b == blue)
 1c2:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 1c4:	ce 5f       	subi	r28, 0xFE	; 254
 1c6:	df 4f       	sbci	r29, 0xFF	; 255
 1c8:	68 81       	ld	r22, Y
 1ca:	c2 50       	subi	r28, 0x02	; 2
 1cc:	d0 40       	sbci	r29, 0x00	; 0
 1ce:	64 13       	cpse	r22, r20
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <__DATA_REGION_LENGTH__+0xd4>
		{
			start &= ~INC_BLUE;
			start &= ~DEC_BLUE;
 1d2:	3f 7c       	andi	r19, 0xCF	; 207
		}
		for(i = 0; i < MAXPIX; i++)
			ws2812_sendarray((uint8_t*)&led,3);
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	41 df       	rcall	.-382    	; 0x60 <ws2812_sendarray>
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	3c df       	rcall	.-392    	; 0x60 <ws2812_sendarray>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	4f e2       	ldi	r20, 0x2F	; 47
 1ea:	55 e7       	ldi	r21, 0x75	; 117
 1ec:	41 50       	subi	r20, 0x01	; 1
 1ee:	50 40       	sbci	r21, 0x00	; 0
 1f0:	e9 f7       	brne	.-6      	; 0x1ec <__DATA_REGION_LENGTH__+0xec>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <__DATA_REGION_LENGTH__+0xf4>
 1f4:	00 00       	nop
		start |= INC_GREEN;
	if(led.b > blue)
		start |= DEC_BLUE;
	if(led.b < blue)
		start |= INC_BLUE;
	while(led.r != red || led.g != green || led.b != blue)
 1f6:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 1f8:	24 13       	cpse	r18, r20
 1fa:	b9 cf       	rjmp	.-142    	; 0x16e <__DATA_REGION_LENGTH__+0x6e>
 1fc:	52 a1       	lds	r21, 0x42	; 0x800042 <__data_end>
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	df 4f       	sbci	r29, 0xFF	; 255
 202:	68 81       	ld	r22, Y
 204:	c1 50       	subi	r28, 0x01	; 1
 206:	d0 40       	sbci	r29, 0x00	; 0
 208:	65 13       	cpse	r22, r21
 20a:	b1 cf       	rjmp	.-158    	; 0x16e <__DATA_REGION_LENGTH__+0x6e>
 20c:	54 a1       	lds	r21, 0x44	; 0x800044 <__data_end+0x2>
 20e:	ce 5f       	subi	r28, 0xFE	; 254
 210:	df 4f       	sbci	r29, 0xFF	; 255
 212:	68 81       	ld	r22, Y
 214:	c2 50       	subi	r28, 0x02	; 2
 216:	d0 40       	sbci	r29, 0x00	; 0
 218:	65 13       	cpse	r22, r21
 21a:	a9 cf       	rjmp	.-174    	; 0x16e <__DATA_REGION_LENGTH__+0x6e>
		}
		for(i = 0; i < MAXPIX; i++)
			ws2812_sendarray((uint8_t*)&led,3);
		_delay_ms(15);
	}
}
 21c:	0f 91       	pop	r16
 21e:	0f 91       	pop	r16
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	08 95       	ret

0000022a <rainbow>:

void rainbow()
{
 22a:	cf 93       	push	r28
	uint8_t start = 0;
	uint8_t i = 0;
	fade(COLOR_RED);
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	5e df       	rcall	.-324    	; 0xf0 <fade>
	while(selectedColor == 8)
 234:	40 a1       	lds	r20, 0x40	; 0x800040 <__data_start>
 236:	48 30       	cpi	r20, 0x08	; 8
 238:	39 f0       	breq	.+14     	; 0x248 <rainbow+0x1e>
 23a:	46 c0       	rjmp	.+140    	; 0x2c8 <rainbow+0x9e>
	{
		if((start & INC_RED)== INC_RED)
 23c:	c0 ff       	sbrs	r28, 0
 23e:	05 c0       	rjmp	.+10     	; 0x24a <rainbow+0x20>
			led.r++;
 240:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 242:	4f 5f       	subi	r20, 0xFF	; 255
 244:	43 a9       	sts	0x43, r20	; 0x800043 <__data_end+0x1>
 246:	01 c0       	rjmp	.+2      	; 0x24a <rainbow+0x20>
void rainbow()
{
	uint8_t start = 0;
	uint8_t i = 0;
	fade(COLOR_RED);
	while(selectedColor == 8)
 248:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if((start & INC_RED)== INC_RED)
			led.r++;
		if((start & DEC_RED)== DEC_RED)
 24a:	c1 ff       	sbrs	r28, 1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <rainbow+0x2a>
			led.r--;
 24e:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 250:	41 50       	subi	r20, 0x01	; 1
 252:	43 a9       	sts	0x43, r20	; 0x800043 <__data_end+0x1>
		if((start & INC_GREEN)== INC_GREEN)
 254:	c2 ff       	sbrs	r28, 2
 256:	03 c0       	rjmp	.+6      	; 0x25e <rainbow+0x34>
			led.g++;
 258:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 25a:	4f 5f       	subi	r20, 0xFF	; 255
 25c:	42 a9       	sts	0x42, r20	; 0x800042 <__data_end>
		if((start & DEC_GREEN)== DEC_GREEN)
 25e:	c3 ff       	sbrs	r28, 3
 260:	03 c0       	rjmp	.+6      	; 0x268 <rainbow+0x3e>
			led.g--;
 262:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 264:	41 50       	subi	r20, 0x01	; 1
 266:	42 a9       	sts	0x42, r20	; 0x800042 <__data_end>
		if((start & INC_BLUE)== INC_BLUE)
 268:	c4 ff       	sbrs	r28, 4
 26a:	03 c0       	rjmp	.+6      	; 0x272 <rainbow+0x48>
			led.b++;
 26c:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 26e:	4f 5f       	subi	r20, 0xFF	; 255
 270:	44 a9       	sts	0x44, r20	; 0x800044 <__data_end+0x2>
		if((start & DEC_BLUE)== DEC_BLUE)
 272:	c5 ff       	sbrs	r28, 5
 274:	03 c0       	rjmp	.+6      	; 0x27c <rainbow+0x52>
			led.b--;
 276:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 278:	41 50       	subi	r20, 0x01	; 1
 27a:	44 a9       	sts	0x44, r20	; 0x800044 <__data_end+0x2>
		if(led.r == 0xff)
 27c:	43 a1       	lds	r20, 0x43	; 0x800043 <__data_end+0x1>
 27e:	4f 3f       	cpi	r20, 0xFF	; 255
 280:	11 f4       	brne	.+4      	; 0x286 <rainbow+0x5c>
		{
			start &= ~DEC_BLUE;
			start &= ~INC_RED;
 282:	ce 7d       	andi	r28, 0xDE	; 222
			start |= DEC_RED;
			start |= INC_GREEN;
 284:	c6 60       	ori	r28, 0x06	; 6
		}
		if(led.g == 0xff)
 286:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 288:	4f 3f       	cpi	r20, 0xFF	; 255
 28a:	11 f4       	brne	.+4      	; 0x290 <rainbow+0x66>
		{
			start &= ~DEC_RED;
			start &= ~INC_GREEN;
 28c:	c9 7f       	andi	r28, 0xF9	; 249
			start |= DEC_GREEN;
			start |= INC_BLUE;
 28e:	c8 61       	ori	r28, 0x18	; 24
		}
		if(led.b == 0xff)
 290:	44 a1       	lds	r20, 0x44	; 0x800044 <__data_end+0x2>
 292:	4f 3f       	cpi	r20, 0xFF	; 255
 294:	11 f4       	brne	.+4      	; 0x29a <rainbow+0x70>
		{
			start &= ~DEC_GREEN;
			start &= ~INC_BLUE;
 296:	c7 7e       	andi	r28, 0xE7	; 231
			start |= DEC_BLUE;
			start |= INC_RED;
 298:	c1 62       	ori	r28, 0x21	; 33
		}
		for(i = 0; i < MAXPIX; i++)
			ws2812_sendarray((uint8_t*)&led,3);
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	82 e4       	ldi	r24, 0x42	; 66
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	de de       	rcall	.-580    	; 0x60 <ws2812_sendarray>
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	82 e4       	ldi	r24, 0x42	; 66
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	d9 de       	rcall	.-590    	; 0x60 <ws2812_sendarray>
 2ae:	4f ef       	ldi	r20, 0xFF	; 255
 2b0:	59 e6       	ldi	r21, 0x69	; 105
 2b2:	68 e1       	ldi	r22, 0x18	; 24
 2b4:	41 50       	subi	r20, 0x01	; 1
 2b6:	50 40       	sbci	r21, 0x00	; 0
 2b8:	60 40       	sbci	r22, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <rainbow+0x8a>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <rainbow+0x94>
 2be:	00 00       	nop
void rainbow()
{
	uint8_t start = 0;
	uint8_t i = 0;
	fade(COLOR_RED);
	while(selectedColor == 8)
 2c0:	40 a1       	lds	r20, 0x40	; 0x800040 <__data_start>
 2c2:	48 30       	cpi	r20, 0x08	; 8
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <rainbow+0x9e>
 2c6:	ba cf       	rjmp	.-140    	; 0x23c <rainbow+0x12>
		}
		for(i = 0; i < MAXPIX; i++)
			ws2812_sendarray((uint8_t*)&led,3);
		_delay_ms(1000);
	}
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <main>:

int main(void)
{
	#ifdef __AVR_ATtiny10__
	CCP=0xD8;		// configuration change protection, write signature
 2cc:	48 ed       	ldi	r20, 0xD8	; 216
 2ce:	4c bf       	out	0x3c, r20	; 60
	CLKPSR=0;		// set cpu clock prescaler =1 (8Mhz) (attiny 4/5/9/10)
 2d0:	16 bf       	out	0x36, r17	; 54
	#endif
	
	// Set direction (1 = output; 0 = input)
	DDRB &= ~(1<<DDB1);
 2d2:	09 98       	cbi	0x01, 1	; 1
	
	// Set pull-up (1 = enable; 0 = disable)
	PUEB |= (1<<PUEB1);
 2d4:	19 9a       	sbi	0x03, 1	; 3
	
	// Enable pin change interrupt
	PCICR |= (1 << PCIE0);    
 2d6:	90 9a       	sbi	0x12, 0	; 18
	
	// Enable pin change interrupt for PCINT1
	PCMSK |= (1 << PCINT1);    
 2d8:	81 9a       	sbi	0x10, 1	; 16
	
	// Clear interrupt flag
	//PCIFR = 1;
	
	//Enable interrupts	
	sei();
 2da:	78 94       	sei
	uint8_t currentSelection = selectedColor;
	while(1)
	{	
		if(currentSelection != selectedColor)
 2dc:	50 a1       	lds	r21, 0x40	; 0x800040 <__data_start>
 2de:	38 c0       	rjmp	.+112    	; 0x350 <main+0x84>
		{
			switch(selectedColor)
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	49 30       	cpi	r20, 0x09	; 9
 2e4:	51 07       	cpc	r21, r17
 2e6:	78 f5       	brcc	.+94     	; 0x346 <main+0x7a>
 2e8:	e4 2f       	mov	r30, r20
 2ea:	f5 2f       	mov	r31, r21
 2ec:	e5 5f       	subi	r30, 0xF5	; 245
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	09 94       	ijmp
			{
				case 0: fade(COLOR_RED);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	fb de       	rcall	.-522    	; 0xf0 <fade>
					break;
 2fa:	29 c0       	rjmp	.+82     	; 0x34e <main+0x82>
				case 1: fade(COLOR_ORANGE);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	64 e6       	ldi	r22, 0x64	; 100
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	f6 de       	rcall	.-532    	; 0xf0 <fade>
					break;
 304:	24 c0       	rjmp	.+72     	; 0x34e <main+0x82>
				case 2: fade(COLOR_YELLOW);
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	6f ef       	ldi	r22, 0xFF	; 255
 30a:	84 e6       	ldi	r24, 0x64	; 100
 30c:	f1 de       	rcall	.-542    	; 0xf0 <fade>
					break;
 30e:	1f c0       	rjmp	.+62     	; 0x34e <main+0x82>
				case 3: fade(COLOR_GREEN);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	6f ef       	ldi	r22, 0xFF	; 255
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	ec de       	rcall	.-552    	; 0xf0 <fade>
					break;
 318:	1a c0       	rjmp	.+52     	; 0x34e <main+0x82>
				case 4: fade(COLOR_LIGHT_BLUE);
 31a:	4f ef       	ldi	r20, 0xFF	; 255
 31c:	64 e6       	ldi	r22, 0x64	; 100
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	e7 de       	rcall	.-562    	; 0xf0 <fade>
					break;
 322:	15 c0       	rjmp	.+42     	; 0x34e <main+0x82>
				case 5: fade(COLOR_BLUE);
 324:	4f ef       	ldi	r20, 0xFF	; 255
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	e2 de       	rcall	.-572    	; 0xf0 <fade>
					break;
 32c:	10 c0       	rjmp	.+32     	; 0x34e <main+0x82>
				case 6: fade(COLOR_VIOLET);
 32e:	4f ef       	ldi	r20, 0xFF	; 255
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	84 e6       	ldi	r24, 0x64	; 100
 334:	dd de       	rcall	.-582    	; 0xf0 <fade>
					break;
 336:	0b c0       	rjmp	.+22     	; 0x34e <main+0x82>
				case 7: fade(COLOR_WHITE);
 338:	4f ef       	ldi	r20, 0xFF	; 255
 33a:	6f ef       	ldi	r22, 0xFF	; 255
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	d8 de       	rcall	.-592    	; 0xf0 <fade>
					break;
 340:	06 c0       	rjmp	.+12     	; 0x34e <main+0x82>
				case 8: rainbow();
 342:	73 df       	rcall	.-282    	; 0x22a <rainbow>
					break;
 344:	04 c0       	rjmp	.+8      	; 0x34e <main+0x82>
				case MAXCOLORS:
				default: fade(COLOR_BLACK);			
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	d1 de       	rcall	.-606    	; 0xf0 <fade>
			}
		currentSelection = selectedColor;
 34e:	50 a1       	lds	r21, 0x40	; 0x800040 <__data_start>
 350:	4f e7       	ldi	r20, 0x7F	; 127
 352:	6a e1       	ldi	r22, 0x1A	; 26
 354:	76 e0       	ldi	r23, 0x06	; 6
 356:	41 50       	subi	r20, 0x01	; 1
 358:	60 40       	sbci	r22, 0x00	; 0
 35a:	70 40       	sbci	r23, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <main+0x8a>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0x94>
 360:	00 00       	nop
	//Enable interrupts	
	sei();
	uint8_t currentSelection = selectedColor;
	while(1)
	{	
		if(currentSelection != selectedColor)
 362:	40 a1       	lds	r20, 0x40	; 0x800040 <__data_start>
 364:	54 13       	cpse	r21, r20
 366:	bc cf       	rjmp	.-136    	; 0x2e0 <main+0x14>
 368:	54 2f       	mov	r21, r20
 36a:	f2 cf       	rjmp	.-28     	; 0x350 <main+0x84>

0000036c <__udivmodqi4>:
 36c:	99 1b       	sub	r25, r25
 36e:	79 e0       	ldi	r23, 0x09	; 9
 370:	04 c0       	rjmp	.+8      	; 0x37a <__udivmodqi4_ep>

00000372 <__udivmodqi4_loop>:
 372:	99 1f       	adc	r25, r25
 374:	96 17       	cp	r25, r22
 376:	08 f0       	brcs	.+2      	; 0x37a <__udivmodqi4_ep>
 378:	96 1b       	sub	r25, r22

0000037a <__udivmodqi4_ep>:
 37a:	88 1f       	adc	r24, r24
 37c:	7a 95       	dec	r23
 37e:	c9 f7       	brne	.-14     	; 0x372 <__udivmodqi4_loop>
 380:	80 95       	com	r24
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
